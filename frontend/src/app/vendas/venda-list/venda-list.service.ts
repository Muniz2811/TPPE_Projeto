import { Injectable } from '@angular/core';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { VendaService } from '../../services/venda.service';\nimport { ClienteService } from '../../services/cliente.service';\nimport { ProdutoService } from '../../services/produto.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VendaListHelperService {\n  constructor(\n    private vendaService: VendaService,\n    private clienteService: ClienteService,\n    private produtoService: ProdutoService\n  ) {}\n\n  /**\n   * Carrega vendas, clientes e produtos de forma otimizada usando forkJoin\n   * Implementado em 18 de julho de 2025 para resolver problemas de referência\n   */\n  carregarDadosVendas() {\n    return forkJoin([\n      this.clienteService.getClientes(),\n      this.produtoService.getProdutos(),\n      this.vendaService.getVendas()\n    ]).pipe(\n      map(([clientesResponse, produtosResponse, vendasResponse]) => {\n        // Criar mapas para referência rápida\n        const clientesMap = {};\n        const produtosMap = {};\n\n        // Processar clientes\n        if (clientesResponse.success && Array.isArray(clientesResponse.data)) {\n          clientesResponse.data.forEach(cliente => {\n            clientesMap[cliente._id] = cliente.nome;\n          });\n        }\n\n        // Processar produtos\n        if (produtosResponse.success && Array.isArray(produtosResponse.data)) {\n          produtosResponse.data.forEach(produto => {\n            produtosMap[produto._id] = produto.nome;\n          });\n        }\n\n        // Retornar tudo organizado\n        return {\n          vendas: vendasResponse.success ? vendasResponse.data : [],\n          clientesMap,\n          produtosMap,\n          success: vendasResponse.success,\n          message: vendasResponse.message\n        };\n      })\n    );\n  }\n}
