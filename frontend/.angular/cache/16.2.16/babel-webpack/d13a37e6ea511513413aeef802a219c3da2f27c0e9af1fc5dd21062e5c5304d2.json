{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass FabricanteService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = '/api/fabricantes';\n  }\n  // Obter todos os fabricantes\n  getFabricantes() {\n    return this.http.get(this.apiUrl).pipe(catchError(error => {\n      console.error('Erro ao buscar fabricantes', error);\n      return of({\n        success: false,\n        data: [],\n        message: 'Erro ao buscar fabricantes. Tente novamente.'\n      });\n    }));\n  }\n  // Obter um fabricante específico\n  getFabricante(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n      console.error('Erro ao buscar fabricante', error);\n      return of({\n        success: false,\n        data: {},\n        message: 'Erro ao buscar fabricante. Tente novamente.'\n      });\n    }));\n  }\n  // Criar um novo fabricante\n  createFabricante(fabricante) {\n    return this.http.post(this.apiUrl, fabricante).pipe(catchError(error => {\n      console.error('Erro ao criar fabricante', error);\n      return of({\n        success: false,\n        data: {},\n        message: 'Erro ao criar fabricante. Tente novamente.'\n      });\n    }));\n  }\n  // Atualizar um fabricante existente\n  updateFabricante(id, fabricante) {\n    return this.http.put(`${this.apiUrl}/${id}`, fabricante).pipe(catchError(error => {\n      console.error('Erro ao atualizar fabricante', error);\n      return of({\n        success: false,\n        data: {},\n        message: 'Erro ao atualizar fabricante. Tente novamente.'\n      });\n    }));\n  }\n  // Excluir um fabricante\n  deleteFabricante(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n      console.error('Erro ao excluir fabricante', error);\n      return of({\n        success: false,\n        data: {},\n        message: 'Erro ao excluir fabricante. Tente novamente.'\n      });\n    }));\n  }\n  static {\n    this.ɵfac = function FabricanteService_Factory(t) {\n      return new (t || FabricanteService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FabricanteService,\n      factory: FabricanteService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { FabricanteService };","map":{"version":3,"names":["of","catchError","FabricanteService","constructor","http","apiUrl","getFabricantes","get","pipe","error","console","success","data","message","getFabricante","id","createFabricante","fabricante","post","updateFabricante","put","deleteFabricante","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/app/src/app/services/fabricante.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Fabricante } from './produto.service';\n\nexport interface FabricanteResponse {\n  success: boolean;\n  data: Fabricante | Fabricante[];\n  count?: number;\n  message?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FabricanteService {\n  private apiUrl = '/api/fabricantes';\n\n  constructor(private http: HttpClient) { }\n\n  // Obter todos os fabricantes\n  getFabricantes(): Observable<FabricanteResponse> {\n    return this.http.get<FabricanteResponse>(this.apiUrl)\n      .pipe(\n        catchError(error => {\n          console.error('Erro ao buscar fabricantes', error);\n          return of({ success: false, data: [], message: 'Erro ao buscar fabricantes. Tente novamente.' });\n        })\n      );\n  }\n\n  // Obter um fabricante específico\n  getFabricante(id: string): Observable<FabricanteResponse> {\n    return this.http.get<FabricanteResponse>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error('Erro ao buscar fabricante', error);\n          return of({ success: false, data: {} as Fabricante, message: 'Erro ao buscar fabricante. Tente novamente.' });\n        })\n      );\n  }\n  \n  // Criar um novo fabricante\n  createFabricante(fabricante: Fabricante): Observable<FabricanteResponse> {\n    return this.http.post<FabricanteResponse>(this.apiUrl, fabricante)\n      .pipe(\n        catchError(error => {\n          console.error('Erro ao criar fabricante', error);\n          return of({ success: false, data: {} as Fabricante, message: 'Erro ao criar fabricante. Tente novamente.' });\n        })\n      );\n  }\n\n  // Atualizar um fabricante existente\n  updateFabricante(id: string, fabricante: Fabricante): Observable<FabricanteResponse> {\n    return this.http.put<FabricanteResponse>(`${this.apiUrl}/${id}`, fabricante)\n      .pipe(\n        catchError(error => {\n          console.error('Erro ao atualizar fabricante', error);\n          return of({ success: false, data: {} as Fabricante, message: 'Erro ao atualizar fabricante. Tente novamente.' });\n        })\n      );\n  }\n\n  // Excluir um fabricante\n  deleteFabricante(id: string): Observable<FabricanteResponse> {\n    return this.http.delete<FabricanteResponse>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error('Erro ao excluir fabricante', error);\n          return of({ success: false, data: {} as Fabricante, message: 'Erro ao excluir fabricante. Tente novamente.' });\n        })\n      );\n  }\n}\n"],"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,QAAQ,gBAAgB;;;AAU3C,MAGaC,iBAAiB;EAG5BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,kBAAkB;EAEK;EAExC;EACAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAqB,IAAI,CAACF,MAAM,CAAC,CAClDG,IAAI,CACHP,UAAU,CAACQ,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAOT,EAAE,CAAC;QAAEW,OAAO,EAAE,KAAK;QAAEC,IAAI,EAAE,EAAE;QAAEC,OAAO,EAAE;MAA8C,CAAE,CAAC;IAClG,CAAC,CAAC,CACH;EACL;EAEA;EACAC,aAAaA,CAACC,EAAU;IACtB,OAAO,IAAI,CAACX,IAAI,CAACG,GAAG,CAAqB,GAAG,IAAI,CAACF,MAAM,IAAIU,EAAE,EAAE,CAAC,CAC7DP,IAAI,CACHP,UAAU,CAACQ,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAOT,EAAE,CAAC;QAAEW,OAAO,EAAE,KAAK;QAAEC,IAAI,EAAE,EAAgB;QAAEC,OAAO,EAAE;MAA6C,CAAE,CAAC;IAC/G,CAAC,CAAC,CACH;EACL;EAEA;EACAG,gBAAgBA,CAACC,UAAsB;IACrC,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAqB,IAAI,CAACb,MAAM,EAAEY,UAAU,CAAC,CAC/DT,IAAI,CACHP,UAAU,CAACQ,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAOT,EAAE,CAAC;QAAEW,OAAO,EAAE,KAAK;QAAEC,IAAI,EAAE,EAAgB;QAAEC,OAAO,EAAE;MAA4C,CAAE,CAAC;IAC9G,CAAC,CAAC,CACH;EACL;EAEA;EACAM,gBAAgBA,CAACJ,EAAU,EAAEE,UAAsB;IACjD,OAAO,IAAI,CAACb,IAAI,CAACgB,GAAG,CAAqB,GAAG,IAAI,CAACf,MAAM,IAAIU,EAAE,EAAE,EAAEE,UAAU,CAAC,CACzET,IAAI,CACHP,UAAU,CAACQ,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAOT,EAAE,CAAC;QAAEW,OAAO,EAAE,KAAK;QAAEC,IAAI,EAAE,EAAgB;QAAEC,OAAO,EAAE;MAAgD,CAAE,CAAC;IAClH,CAAC,CAAC,CACH;EACL;EAEA;EACAQ,gBAAgBA,CAACN,EAAU;IACzB,OAAO,IAAI,CAACX,IAAI,CAACkB,MAAM,CAAqB,GAAG,IAAI,CAACjB,MAAM,IAAIU,EAAE,EAAE,CAAC,CAChEP,IAAI,CACHP,UAAU,CAACQ,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAOT,EAAE,CAAC;QAAEW,OAAO,EAAE,KAAK;QAAEC,IAAI,EAAE,EAAgB;QAAEC,OAAO,EAAE;MAA8C,CAAE,CAAC;IAChH,CAAC,CAAC,CACH;EACL;;;uBA1DWX,iBAAiB,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAjBxB,iBAAiB;MAAAyB,OAAA,EAAjBzB,iBAAiB,CAAA0B,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;SAEP3B,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}