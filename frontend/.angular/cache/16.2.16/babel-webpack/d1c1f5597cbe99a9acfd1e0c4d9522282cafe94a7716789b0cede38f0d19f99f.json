{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  register(username, email, password) {\n    return this.http.post(`${this.apiUrl}/register`, {\n      username,\n      email,\n      password\n    }).pipe(catchError(error => {\n      console.error('Register error', error);\n      return of({\n        success: false,\n        message: error.error?.message || 'Erro ao registrar usuário. Tente novamente.'\n      });\n    }));\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      if (response.success && response.data) {\n        // Store user details and token in local storage\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('currentUser', JSON.stringify(response.data.user));\n        this.currentUserSubject.next(response.data.user);\n      }\n    }), catchError(error => {\n      console.error('Login error', error);\n      return of({\n        success: false,\n        message: error.error?.message || 'Erro ao fazer login. Tente novamente.'\n      });\n    }));\n  }\n  logout() {\n    // Remove user from local storage\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('token');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","of","catchError","tap","environment","AuthService","constructor","http","router","apiUrl","storedUser","localStorage","getItem","currentUserSubject","JSON","parse","currentUser","asObservable","currentUserValue","value","register","username","email","password","post","pipe","error","console","success","message","login","response","data","setItem","token","stringify","user","next","logout","removeItem","navigate","getToken","isLoggedIn","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/app/src/app/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { environment } from '../../environments/environment';\n\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  role: string;\n}\n\nexport interface AuthResponse {\n  success: boolean;\n  data?: {\n    token: string;\n    user: User;\n  };\n  message?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private currentUserSubject: BehaviorSubject<User | null>;\n  public currentUser: Observable<User | null>;\n  \n  constructor(private http: HttpClient, private router: Router) {\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject<User | null>(\n      storedUser ? JSON.parse(storedUser) : null\n    );\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  register(username: string, email: string, password: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, { username, email, password })\n      .pipe(\n        catchError(error => {\n          console.error('Register error', error);\n          return of({ \n            success: false, \n            message: error.error?.message || 'Erro ao registrar usuário. Tente novamente.'\n          });\n        })\n      );\n  }\n\n  login(email: string, password: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, { email, password })\n      .pipe(\n        tap(response => {\n          if (response.success && response.data) {\n            // Store user details and token in local storage\n            localStorage.setItem('token', response.data.token);\n            localStorage.setItem('currentUser', JSON.stringify(response.data.user));\n            this.currentUserSubject.next(response.data.user);\n          }\n        }),\n        catchError(error => {\n          console.error('Login error', error);\n          return of({ \n            success: false, \n            message: error.error?.message || 'Erro ao fazer login. Tente novamente.'\n          });\n        })\n      );\n  }\n\n  logout(): void {\n    // Remove user from local storage\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('token');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  isLoggedIn(): boolean {\n    return !!this.getToken();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}