{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthInterceptor {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    // Get the auth token from the service\n    const token = this.authService.getToken();\n    // Clone the request and add the token if it exists\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    // Handle the request and catch any errors\n    return next.handle(request).pipe(catchError(error => {\n      // If we get a 401 Unauthorized response, log the user out\n      if (error.status === 401) {\n        this.authService.logout();\n        this.router.navigate(['/login']);\n      }\n      return throwError(() => error);\n    }));\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}\nexport { AuthInterceptor };","map":{"version":3,"names":["throwError","catchError","AuthInterceptor","constructor","authService","router","intercept","request","next","token","getToken","clone","setHeaders","Authorization","handle","pipe","error","status","logout","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac"],"sources":["/app/src/app/auth/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    // Get the auth token from the service\n    const token = this.authService.getToken();\n\n    // Clone the request and add the token if it exists\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n\n    // Handle the request and catch any errors\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        // If we get a 401 Unauthorized response, log the user out\n        if (error.status === 401) {\n          this.authService.logout();\n          this.router.navigate(['/login']);\n        }\n        return throwError(() => error);\n      })\n    );\n  }\n}\n"],"mappings":"AAQA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;;AAI3C,MACaC,eAAe;EAC1BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD;IACA,MAAMC,KAAK,GAAG,IAAI,CAACL,WAAW,CAACM,QAAQ,EAAE;IAEzC;IACA,IAAID,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUJ,KAAK;;OAEjC,CAAC;;IAGJ;IACA,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC,CAACQ,IAAI,CAC9Bd,UAAU,CAAEe,KAAwB,IAAI;MACtC;MACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAI,CAACb,WAAW,CAACc,MAAM,EAAE;QACzB,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAElC,OAAOnB,UAAU,CAAC,MAAMgB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;;uBA3BWd,eAAe,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAfvB,eAAe;MAAAwB,OAAA,EAAfxB,eAAe,CAAAyB;IAAA;EAAA;;SAAfzB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}