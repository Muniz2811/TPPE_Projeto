{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.authService.isLoggedIn()) {\n      // Check if route has data.roles and user has one of required roles\n      if (route.data['roles'] && !this.checkRoles(route.data['roles'])) {\n        // Role not authorized, redirect to home page\n        this.router.navigate(['/']);\n        return false;\n      }\n      // Authorized\n      return true;\n    }\n    // Not logged in, redirect to login page with return url\n    this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n  checkRoles(roles) {\n    const user = this.authService.currentUserValue;\n    if (!user) return false;\n    return roles.includes(user.role);\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthGuard };","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","route","state","isLoggedIn","data","checkRoles","navigate","queryParams","returnUrl","url","roles","user","currentUserValue","includes","role","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["/app/src/app/auth/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { \n  CanActivate, \n  ActivatedRouteSnapshot, \n  RouterStateSnapshot, \n  Router \n} from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  \n  constructor(private authService: AuthService, private router: Router) {}\n  \n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    if (this.authService.isLoggedIn()) {\n      // Check if route has data.roles and user has one of required roles\n      if (route.data['roles'] && !this.checkRoles(route.data['roles'])) {\n        // Role not authorized, redirect to home page\n        this.router.navigate(['/']);\n        return false;\n      }\n      \n      // Authorized\n      return true;\n    }\n    \n    // Not logged in, redirect to login page with return url\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n    return false;\n  }\n  \n  private checkRoles(roles: string[]): boolean {\n    const user = this.authService.currentUserValue;\n    if (!user) return false;\n    \n    return roles.includes(user.role);\n  }\n}\n"],"mappings":";;;AASA,MAGaA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B,IAAI,IAAI,CAACJ,WAAW,CAACK,UAAU,EAAE,EAAE;MACjC;MACA,IAAIF,KAAK,CAACG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAACC,UAAU,CAACJ,KAAK,CAACG,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE;QAChE;QACA,IAAI,CAACL,MAAM,CAACO,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,OAAO,KAAK;;MAGd;MACA,OAAO,IAAI;;IAGb;IACA,IAAI,CAACP,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEN,KAAK,CAACO;MAAG;IAAE,CAAE,CAAC;IAC3E,OAAO,KAAK;EACd;EAEQJ,UAAUA,CAACK,KAAe;IAChC,MAAMC,IAAI,GAAG,IAAI,CAACb,WAAW,CAACc,gBAAgB;IAC9C,IAAI,CAACD,IAAI,EAAE,OAAO,KAAK;IAEvB,OAAOD,KAAK,CAACG,QAAQ,CAACF,IAAI,CAACG,IAAI,CAAC;EAClC;;;uBA9BWlB,SAAS,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATxB,SAAS;MAAAyB,OAAA,EAATzB,SAAS,CAAA0B,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA;;SAEP3B,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}