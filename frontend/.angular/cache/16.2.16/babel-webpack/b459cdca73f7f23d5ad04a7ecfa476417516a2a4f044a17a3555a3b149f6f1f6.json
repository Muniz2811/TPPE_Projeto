{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass ClienteService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = '/api/clientes';\n  }\n  // Obter todos os clientes\n  getClientes() {\n    return this.http.get(this.apiUrl).pipe(catchError(error => {\n      console.error('Erro ao buscar clientes', error);\n      return of({\n        success: false,\n        data: [],\n        message: 'Erro ao buscar clientes. Tente novamente.'\n      });\n    }));\n  }\n  // Obter um cliente específico\n  getCliente(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n      console.error('Erro ao buscar cliente', error);\n      return of({\n        success: false,\n        data: {},\n        message: 'Erro ao buscar cliente. Tente novamente.'\n      });\n    }));\n  }\n  // Criar um novo cliente\n  createCliente(cliente) {\n    return this.http.post(this.apiUrl, cliente).pipe(catchError(error => {\n      console.error('Erro ao criar cliente', error);\n      return of({\n        success: false,\n        data: {},\n        message: error.error?.message || 'Erro ao criar cliente. Tente novamente.'\n      });\n    }));\n  }\n  // Atualizar um cliente existente\n  updateCliente(id, cliente) {\n    return this.http.put(`${this.apiUrl}/${id}`, cliente).pipe(catchError(error => {\n      console.error('Erro ao atualizar cliente', error);\n      return of({\n        success: false,\n        data: {},\n        message: error.error?.message || 'Erro ao atualizar cliente. Tente novamente.'\n      });\n    }));\n  }\n  // Excluir um cliente\n  deleteCliente(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n      console.error('Erro ao excluir cliente', error);\n      return of({\n        success: false,\n        data: {},\n        message: error.error?.message || 'Erro ao excluir cliente. Tente novamente.'\n      });\n    }));\n  }\n  // Formas de pagamento disponíveis (conforme definido no backend)\n  getFormasPagamento() {\n    return ['Dinheiro', 'Cartão de Crédito', 'Cartão de Débito', 'Pix', 'Boleto'];\n  }\n  static {\n    this.ɵfac = function ClienteService_Factory(t) {\n      return new (t || ClienteService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ClienteService,\n      factory: ClienteService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { ClienteService };","map":{"version":3,"names":["of","catchError","ClienteService","constructor","http","apiUrl","getClientes","get","pipe","error","console","success","data","message","getCliente","id","createCliente","cliente","post","updateCliente","put","deleteCliente","delete","getFormasPagamento","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/app/src/app/services/cliente.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nexport interface Cliente {\n  _id?: string;\n  nome: string;\n  telefone: string;\n  endereco: string;\n  email: string;\n  cpf: string;\n  forma_pagamento: string;\n  rg: string;\n  tipo?: string;\n  createdAt?: Date;\n  updatedAt?: Date;\n}\n\nexport interface ClienteResponse {\n  success: boolean;\n  data: Cliente | Cliente[];\n  count?: number;\n  message?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClienteService {\n  private apiUrl = '/api/clientes';\n\n  constructor(private http: HttpClient) { }\n\n  // Obter todos os clientes\n  getClientes(): Observable<ClienteResponse> {\n    return this.http.get<ClienteResponse>(this.apiUrl)\n      .pipe(\n        catchError(error => {\n          console.error('Erro ao buscar clientes', error);\n          return of({ success: false, data: [], message: 'Erro ao buscar clientes. Tente novamente.' });\n        })\n      );\n  }\n\n  // Obter um cliente específico\n  getCliente(id: string): Observable<ClienteResponse> {\n    return this.http.get<ClienteResponse>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error('Erro ao buscar cliente', error);\n          return of({ success: false, data: {} as Cliente, message: 'Erro ao buscar cliente. Tente novamente.' });\n        })\n      );\n  }\n\n  // Criar um novo cliente\n  createCliente(cliente: Cliente): Observable<ClienteResponse> {\n    return this.http.post<ClienteResponse>(this.apiUrl, cliente)\n      .pipe(\n        catchError(error => {\n          console.error('Erro ao criar cliente', error);\n          return of({ \n            success: false, \n            data: {} as Cliente, \n            message: error.error?.message || 'Erro ao criar cliente. Tente novamente.'\n          });\n        })\n      );\n  }\n\n  // Atualizar um cliente existente\n  updateCliente(id: string, cliente: Cliente): Observable<ClienteResponse> {\n    return this.http.put<ClienteResponse>(`${this.apiUrl}/${id}`, cliente)\n      .pipe(\n        catchError(error => {\n          console.error('Erro ao atualizar cliente', error);\n          return of({ \n            success: false, \n            data: {} as Cliente, \n            message: error.error?.message || 'Erro ao atualizar cliente. Tente novamente.'\n          });\n        })\n      );\n  }\n\n  // Excluir um cliente\n  deleteCliente(id: string): Observable<ClienteResponse> {\n    return this.http.delete<ClienteResponse>(`${this.apiUrl}/${id}`)\n      .pipe(\n        catchError(error => {\n          console.error('Erro ao excluir cliente', error);\n          return of({ \n            success: false, \n            data: {} as Cliente, \n            message: error.error?.message || 'Erro ao excluir cliente. Tente novamente.'\n          });\n        })\n      );\n  }\n\n  // Formas de pagamento disponíveis (conforme definido no backend)\n  getFormasPagamento(): string[] {\n    return ['Dinheiro', 'Cartão de Crédito', 'Cartão de Débito', 'Pix', 'Boleto'];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}